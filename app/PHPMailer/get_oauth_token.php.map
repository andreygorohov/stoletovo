{"version":3,"names":[],"mappings":"","sources":["PHPMailer/get_oauth_token.php"],"sourcesContent":["<?php\n/**\n * Get an OAuth2 token from Google.\n * * Install this script on your server so that it's accessible\n * as [https/http]://<yourdomain>/<folder>/get_oauth_token.php\n * e.g.: http://localhost/phpmail/get_oauth_token.php\n * * Ensure dependencies are installed with 'composer install'\n * * Set up an app in your Google developer console\n * * Set the script address as the app's redirect URL\n * If no refresh token is obtained when running this file, revoke access to your app\n * using link: https://accounts.google.com/b/0/IssuedAuthSubTokens and run the script again.\n * This script requires PHP 5.4 or later\n * PHP Version 5.4\n */\n\nnamespace League\\OAuth2\\Client\\Provider;\n\nrequire 'vendor/autoload.php';\n\nuse League\\OAuth2\\Client\\Provider\\Exception\\IdentityProviderException;\nuse League\\OAuth2\\Client\\Token\\AccessToken;\nuse League\\OAuth2\\Client\\Tool\\BearerAuthorizationTrait;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nsession_start();\n\n//If this automatic URL doesn't work, set it yourself manually\n$redirectUri = isset($_SERVER['HTTPS']) ? 'https://' : 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];\n//$redirectUri = 'http://localhost/phpmailer/get_oauth_token.php';\n\n//These details obtained are by setting up app in Google developer console.\n$clientId = 'RANDOMCHARS-----duv1n2.apps.googleusercontent.com';\n$clientSecret = 'RANDOMCHARS-----lGyjPcRtvP';\n\nclass Google extends AbstractProvider\n{\n    use BearerAuthorizationTrait;\n\n    const ACCESS_TOKEN_RESOURCE_OWNER_ID = 'id';\n\n    /**\n     * @var string If set, this will be sent to google as the \"access_type\" parameter.\n     * @link https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n     */\n    protected $accessType;\n\n    /**\n     * @var string If set, this will be sent to google as the \"hd\" parameter.\n     * @link https://developers.google.com/accounts/docs/OAuth2Login#hd-param\n     */\n    protected $hostedDomain;\n\n    /**\n     * @var string If set, this will be sent to google as the \"scope\" parameter.\n     * @link https://developers.google.com/gmail/api/auth/scopes\n     */\n    protected $scope;\n\n    public function getBaseAuthorizationUrl()\n    {\n        return 'https://accounts.google.com/o/oauth2/auth';\n    }\n\n    public function getBaseAccessTokenUrl(array $params)\n    {\n        return 'https://accounts.google.com/o/oauth2/token';\n    }\n\n    public function getResourceOwnerDetailsUrl(AccessToken $token)\n    {\n\treturn ' ';\n    }\n\n    protected function getAuthorizationParameters(array $options)\n    {\n\tif (is_array($this->scope)) {\n            $separator = $this->getScopeSeparator();\n            $this->scope = implode($separator, $this->scope);\n        }\n\n        $params = array_merge(\n            parent::getAuthorizationParameters($options),\n            array_filter([\n                'hd'          => $this->hostedDomain,\n                'access_type' => $this->accessType,\n\t\t'scope'       => $this->scope,\n                // if the user is logged in with more than one account ask which one to use for the login!\n                'authuser'    => '-1'\n            ])\n        );\n        return $params;\n    }\n\n    protected function getDefaultScopes()\n    {\n        return [\n            'email',\n            'openid',\n            'profile',\n        ];\n    }\n\n    protected function getScopeSeparator()\n    {\n        return ' ';\n    }\n\n    protected function checkResponse(ResponseInterface $response, $data)\n    {\n        if (!empty($data['error'])) {\n            $code  = 0;\n            $error = $data['error'];\n\n            if (is_array($error)) {\n                $code  = $error['code'];\n                $error = $error['message'];\n            }\n\n            throw new IdentityProviderException($error, $code, $data);\n        }\n    }\n\n    protected function createResourceOwner(array $response, AccessToken $token)\n    {\n        return new GoogleUser($response);\n    }\n}\n\n\n//Set Redirect URI in Developer Console as [https/http]://<yourdomain>/<folder>/get_oauth_token.php\n$provider = new Google(\n    array(\n        'clientId' => $clientId,\n        'clientSecret' => $clientSecret,\n        'redirectUri' => $redirectUri,\n        'scope' => array('https://mail.google.com/'),\n\t'accessType' => 'offline'\n    )\n);\n\nif (!isset($_GET['code'])) {\n    // If we don't have an authorization code then get one\n    $authUrl = $provider->getAuthorizationUrl();\n    $_SESSION['oauth2state'] = $provider->getState();\n    header('Location: ' . $authUrl);\n    exit;\n// Check given state against previously stored one to mitigate CSRF attack\n} elseif (empty($_GET['state']) || ($_GET['state'] !== $_SESSION['oauth2state'])) {\n    unset($_SESSION['oauth2state']);\n    exit('Invalid state');\n} else {\n    // Try to get an access token (using the authorization code grant)\n    $token = $provider->getAccessToken(\n        'authorization_code',\n        array(\n            'code' => $_GET['code']\n        )\n    );\n\n    // Use this to get a new access token if the old one expires\n    echo 'Refresh Token: ' . $token->getRefreshToken();\n}\n"],"file":"get_oauth_token.php"}