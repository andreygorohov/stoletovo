{"version":3,"names":[],"mappings":"","sources":["PHPMailer/extras/ntlm_sasl_client.php"],"sourcesContent":["<?php\n/*\n * ntlm_sasl_client.php\n *\n * @(#) $Id: ntlm_sasl_client.php,v 1.3 2004/11/17 08:00:37 mlemos Exp $\n *\n */\n\ndefine(\"SASL_NTLM_STATE_START\", 0);\ndefine(\"SASL_NTLM_STATE_IDENTIFY_DOMAIN\", 1);\ndefine(\"SASL_NTLM_STATE_RESPOND_CHALLENGE\", 2);\ndefine(\"SASL_NTLM_STATE_DONE\", 3);\ndefine(\"SASL_FAIL\", -1);\ndefine(\"SASL_CONTINUE\", 1);\n\nclass ntlm_sasl_client_class\n{\n    public $credentials = array();\n    public $state = SASL_NTLM_STATE_START;\n\n    public function initialize(&$client)\n    {\n        if (!function_exists($function = \"mcrypt_encrypt\")\n            || !function_exists($function = \"mhash\")\n        ) {\n            $extensions = array(\n                \"mcrypt_encrypt\" => \"mcrypt\",\n                \"mhash\" => \"mhash\"\n            );\n            $client->error = \"the extension \" . $extensions[$function] .\n                \" required by the NTLM SASL client class is not available in this PHP configuration\";\n            return (0);\n        }\n        return (1);\n    }\n\n    public function ASCIIToUnicode($ascii)\n    {\n        for ($unicode = \"\", $a = 0; $a < strlen($ascii); $a++) {\n            $unicode .= substr($ascii, $a, 1) . chr(0);\n        }\n        return ($unicode);\n    }\n\n    public function typeMsg1($domain, $workstation)\n    {\n        $domain_length = strlen($domain);\n        $workstation_length = strlen($workstation);\n        $workstation_offset = 32;\n        $domain_offset = $workstation_offset + $workstation_length;\n        return (\n            \"NTLMSSP\\0\" .\n            \"\\x01\\x00\\x00\\x00\" .\n            \"\\x07\\x32\\x00\\x00\" .\n            pack(\"v\", $domain_length) .\n            pack(\"v\", $domain_length) .\n            pack(\"V\", $domain_offset) .\n            pack(\"v\", $workstation_length) .\n            pack(\"v\", $workstation_length) .\n            pack(\"V\", $workstation_offset) .\n            $workstation .\n            $domain\n        );\n    }\n\n    public function NTLMResponse($challenge, $password)\n    {\n        $unicode = $this->ASCIIToUnicode($password);\n        $md4 = mhash(MHASH_MD4, $unicode);\n        $padded = $md4 . str_repeat(chr(0), 21 - strlen($md4));\n        $iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);\n        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);\n        for ($response = \"\", $third = 0; $third < 21; $third += 7) {\n            for ($packed = \"\", $p = $third; $p < $third + 7; $p++) {\n                $packed .= str_pad(decbin(ord(substr($padded, $p, 1))), 8, \"0\", STR_PAD_LEFT);\n            }\n            for ($key = \"\", $p = 0; $p < strlen($packed); $p += 7) {\n                $s = substr($packed, $p, 7);\n                $b = $s . ((substr_count($s, \"1\") % 2) ? \"0\" : \"1\");\n                $key .= chr(bindec($b));\n            }\n            $ciphertext = mcrypt_encrypt(MCRYPT_DES, $key, $challenge, MCRYPT_MODE_ECB, $iv);\n            $response .= $ciphertext;\n        }\n        return $response;\n    }\n\n    public function typeMsg3($ntlm_response, $user, $domain, $workstation)\n    {\n        $domain_unicode = $this->ASCIIToUnicode($domain);\n        $domain_length = strlen($domain_unicode);\n        $domain_offset = 64;\n        $user_unicode = $this->ASCIIToUnicode($user);\n        $user_length = strlen($user_unicode);\n        $user_offset = $domain_offset + $domain_length;\n        $workstation_unicode = $this->ASCIIToUnicode($workstation);\n        $workstation_length = strlen($workstation_unicode);\n        $workstation_offset = $user_offset + $user_length;\n        $lm = \"\";\n        $lm_length = strlen($lm);\n        $lm_offset = $workstation_offset + $workstation_length;\n        $ntlm = $ntlm_response;\n        $ntlm_length = strlen($ntlm);\n        $ntlm_offset = $lm_offset + $lm_length;\n        $session = \"\";\n        $session_length = strlen($session);\n        $session_offset = $ntlm_offset + $ntlm_length;\n        return (\n            \"NTLMSSP\\0\" .\n            \"\\x03\\x00\\x00\\x00\" .\n            pack(\"v\", $lm_length) .\n            pack(\"v\", $lm_length) .\n            pack(\"V\", $lm_offset) .\n            pack(\"v\", $ntlm_length) .\n            pack(\"v\", $ntlm_length) .\n            pack(\"V\", $ntlm_offset) .\n            pack(\"v\", $domain_length) .\n            pack(\"v\", $domain_length) .\n            pack(\"V\", $domain_offset) .\n            pack(\"v\", $user_length) .\n            pack(\"v\", $user_length) .\n            pack(\"V\", $user_offset) .\n            pack(\"v\", $workstation_length) .\n            pack(\"v\", $workstation_length) .\n            pack(\"V\", $workstation_offset) .\n            pack(\"v\", $session_length) .\n            pack(\"v\", $session_length) .\n            pack(\"V\", $session_offset) .\n            \"\\x01\\x02\\x00\\x00\" .\n            $domain_unicode .\n            $user_unicode .\n            $workstation_unicode .\n            $lm .\n            $ntlm\n        );\n    }\n\n    public function start(&$client, &$message, &$interactions)\n    {\n        if ($this->state != SASL_NTLM_STATE_START) {\n            $client->error = \"NTLM authentication state is not at the start\";\n            return (SASL_FAIL);\n        }\n        $this->credentials = array(\n            \"user\" => \"\",\n            \"password\" => \"\",\n            \"realm\" => \"\",\n            \"workstation\" => \"\"\n        );\n        $defaults = array();\n        $status = $client->GetCredentials($this->credentials, $defaults, $interactions);\n        if ($status == SASL_CONTINUE) {\n            $this->state = SASL_NTLM_STATE_IDENTIFY_DOMAIN;\n        }\n        unset($message);\n        return ($status);\n    }\n\n    public function step(&$client, $response, &$message, &$interactions)\n    {\n        switch ($this->state) {\n            case SASL_NTLM_STATE_IDENTIFY_DOMAIN:\n                $message = $this->typeMsg1($this->credentials[\"realm\"], $this->credentials[\"workstation\"]);\n                $this->state = SASL_NTLM_STATE_RESPOND_CHALLENGE;\n                break;\n            case SASL_NTLM_STATE_RESPOND_CHALLENGE:\n                $ntlm_response = $this->NTLMResponse(substr($response, 24, 8), $this->credentials[\"password\"]);\n                $message = $this->typeMsg3(\n                    $ntlm_response,\n                    $this->credentials[\"user\"],\n                    $this->credentials[\"realm\"],\n                    $this->credentials[\"workstation\"]\n                );\n                $this->state = SASL_NTLM_STATE_DONE;\n                break;\n            case SASL_NTLM_STATE_DONE:\n                $client->error = \"NTLM authentication was finished without success\";\n                return (SASL_FAIL);\n            default:\n                $client->error = \"invalid NTLM authentication step state\";\n                return (SASL_FAIL);\n        }\n        return (SASL_CONTINUE);\n    }\n}\n"],"file":"ntlm_sasl_client.php"}