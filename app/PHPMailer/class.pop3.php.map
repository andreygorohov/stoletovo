{"version":3,"names":[],"mappings":"","sources":["PHPMailer/class.pop3.php"],"sourcesContent":["<?php\n/**\n * PHPMailer POP-Before-SMTP Authentication Class.\n * PHP Version 5\n * @package PHPMailer\n * @link https://github.com/PHPMailer/PHPMailer/\n * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>\n * @author Jim Jagielski (jimjag) <jimjag@gmail.com>\n * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>\n * @author Brent R. Matzelle (original founder)\n * @copyright 2012 - 2014 Marcus Bointon\n * @copyright 2010 - 2012 Jim Jagielski\n * @copyright 2004 - 2009 Andy Prevost\n * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License\n * @note This program is distributed in the hope that it will be useful - WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.\n */\n\n/**\n * PHPMailer POP-Before-SMTP Authentication Class.\n * Specifically for PHPMailer to use for RFC1939 POP-before-SMTP authentication.\n * Does not support APOP.\n * @package PHPMailer\n * @author Richard Davey (original author) <rich@corephp.co.uk>\n * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>\n * @author Jim Jagielski (jimjag) <jimjag@gmail.com>\n * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>\n */\nclass POP3\n{\n    /**\n     * The POP3 PHPMailer Version number.\n     * @var string\n     * @access public\n     */\n    public $Version = '5.2.27';\n\n    /**\n     * Default POP3 port number.\n     * @var integer\n     * @access public\n     */\n    public $POP3_PORT = 110;\n\n    /**\n     * Default timeout in seconds.\n     * @var integer\n     * @access public\n     */\n    public $POP3_TIMEOUT = 30;\n\n    /**\n     * POP3 Carriage Return + Line Feed.\n     * @var string\n     * @access public\n     * @deprecated Use the constant instead\n     */\n    public $CRLF = \"\\r\\n\";\n\n    /**\n     * Debug display level.\n     * Options: 0 = no, 1+ = yes\n     * @var integer\n     * @access public\n     */\n    public $do_debug = 0;\n\n    /**\n     * POP3 mail server hostname.\n     * @var string\n     * @access public\n     */\n    public $host;\n\n    /**\n     * POP3 port number.\n     * @var integer\n     * @access public\n     */\n    public $port;\n\n    /**\n     * POP3 Timeout Value in seconds.\n     * @var integer\n     * @access public\n     */\n    public $tval;\n\n    /**\n     * POP3 username\n     * @var string\n     * @access public\n     */\n    public $username;\n\n    /**\n     * POP3 password.\n     * @var string\n     * @access public\n     */\n    public $password;\n\n    /**\n     * Resource handle for the POP3 connection socket.\n     * @var resource\n     * @access protected\n     */\n    protected $pop_conn;\n\n    /**\n     * Are we connected?\n     * @var boolean\n     * @access protected\n     */\n    protected $connected = false;\n\n    /**\n     * Error container.\n     * @var array\n     * @access protected\n     */\n    protected $errors = array();\n\n    /**\n     * Line break constant\n     */\n    const CRLF = \"\\r\\n\";\n\n    /**\n     * Simple static wrapper for all-in-one POP before SMTP\n     * @param $host\n     * @param integer|boolean $port The port number to connect to\n     * @param integer|boolean $timeout The timeout value\n     * @param string $username\n     * @param string $password\n     * @param integer $debug_level\n     * @return boolean\n     */\n    public static function popBeforeSmtp(\n        $host,\n        $port = false,\n        $timeout = false,\n        $username = '',\n        $password = '',\n        $debug_level = 0\n    ) {\n        $pop = new POP3;\n        return $pop->authorise($host, $port, $timeout, $username, $password, $debug_level);\n    }\n\n    /**\n     * Authenticate with a POP3 server.\n     * A connect, login, disconnect sequence\n     * appropriate for POP-before SMTP authorisation.\n     * @access public\n     * @param string $host The hostname to connect to\n     * @param integer|boolean $port The port number to connect to\n     * @param integer|boolean $timeout The timeout value\n     * @param string $username\n     * @param string $password\n     * @param integer $debug_level\n     * @return boolean\n     */\n    public function authorise($host, $port = false, $timeout = false, $username = '', $password = '', $debug_level = 0)\n    {\n        $this->host = $host;\n        // If no port value provided, use default\n        if (false === $port) {\n            $this->port = $this->POP3_PORT;\n        } else {\n            $this->port = (integer)$port;\n        }\n        // If no timeout value provided, use default\n        if (false === $timeout) {\n            $this->tval = $this->POP3_TIMEOUT;\n        } else {\n            $this->tval = (integer)$timeout;\n        }\n        $this->do_debug = $debug_level;\n        $this->username = $username;\n        $this->password = $password;\n        //  Reset the error log\n        $this->errors = array();\n        //  connect\n        $result = $this->connect($this->host, $this->port, $this->tval);\n        if ($result) {\n            $login_result = $this->login($this->username, $this->password);\n            if ($login_result) {\n                $this->disconnect();\n                return true;\n            }\n        }\n        // We need to disconnect regardless of whether the login succeeded\n        $this->disconnect();\n        return false;\n    }\n\n    /**\n     * Connect to a POP3 server.\n     * @access public\n     * @param string $host\n     * @param integer|boolean $port\n     * @param integer $tval\n     * @return boolean\n     */\n    public function connect($host, $port = false, $tval = 30)\n    {\n        //  Are we already connected?\n        if ($this->connected) {\n            return true;\n        }\n\n        //On Windows this will raise a PHP Warning error if the hostname doesn't exist.\n        //Rather than suppress it with @fsockopen, capture it cleanly instead\n        set_error_handler(array($this, 'catchWarning'));\n\n        if (false === $port) {\n            $port = $this->POP3_PORT;\n        }\n\n        //  connect to the POP3 server\n        $this->pop_conn = fsockopen(\n            $host, //  POP3 Host\n            $port, //  Port #\n            $errno, //  Error Number\n            $errstr, //  Error Message\n            $tval\n        ); //  Timeout (seconds)\n        //  Restore the error handler\n        restore_error_handler();\n\n        //  Did we connect?\n        if (false === $this->pop_conn) {\n            //  It would appear not...\n            $this->setError(array(\n                'error' => \"Failed to connect to server $host on port $port\",\n                'errno' => $errno,\n                'errstr' => $errstr\n            ));\n            return false;\n        }\n\n        //  Increase the stream time-out\n        stream_set_timeout($this->pop_conn, $tval, 0);\n\n        //  Get the POP3 server response\n        $pop3_response = $this->getResponse();\n        //  Check for the +OK\n        if ($this->checkResponse($pop3_response)) {\n            //  The connection is established and the POP3 server is talking\n            $this->connected = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Log in to the POP3 server.\n     * Does not support APOP (RFC 2828, 4949).\n     * @access public\n     * @param string $username\n     * @param string $password\n     * @return boolean\n     */\n    public function login($username = '', $password = '')\n    {\n        if (!$this->connected) {\n            $this->setError('Not connected to POP3 server');\n        }\n        if (empty($username)) {\n            $username = $this->username;\n        }\n        if (empty($password)) {\n            $password = $this->password;\n        }\n\n        // Send the Username\n        $this->sendString(\"USER $username\" . self::CRLF);\n        $pop3_response = $this->getResponse();\n        if ($this->checkResponse($pop3_response)) {\n            // Send the Password\n            $this->sendString(\"PASS $password\" . self::CRLF);\n            $pop3_response = $this->getResponse();\n            if ($this->checkResponse($pop3_response)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Disconnect from the POP3 server.\n     * @access public\n     */\n    public function disconnect()\n    {\n        $this->sendString('QUIT');\n        //The QUIT command may cause the daemon to exit, which will kill our connection\n        //So ignore errors here\n        try {\n            @fclose($this->pop_conn);\n        } catch (Exception $e) {\n            //Do nothing\n        };\n    }\n\n    /**\n     * Get a response from the POP3 server.\n     * $size is the maximum number of bytes to retrieve\n     * @param integer $size\n     * @return string\n     * @access protected\n     */\n    protected function getResponse($size = 128)\n    {\n        $response = fgets($this->pop_conn, $size);\n        if ($this->do_debug >= 1) {\n            echo \"Server -> Client: $response\";\n        }\n        return $response;\n    }\n\n    /**\n     * Send raw data to the POP3 server.\n     * @param string $string\n     * @return integer\n     * @access protected\n     */\n    protected function sendString($string)\n    {\n        if ($this->pop_conn) {\n            if ($this->do_debug >= 2) { //Show client messages when debug >= 2\n                echo \"Client -> Server: $string\";\n            }\n            return fwrite($this->pop_conn, $string, strlen($string));\n        }\n        return 0;\n    }\n\n    /**\n     * Checks the POP3 server response.\n     * Looks for for +OK or -ERR.\n     * @param string $string\n     * @return boolean\n     * @access protected\n     */\n    protected function checkResponse($string)\n    {\n        if (substr($string, 0, 3) !== '+OK') {\n            $this->setError(array(\n                'error' => \"Server reported an error: $string\",\n                'errno' => 0,\n                'errstr' => ''\n            ));\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Add an error to the internal error store.\n     * Also display debug output if it's enabled.\n     * @param $error\n     * @access protected\n     */\n    protected function setError($error)\n    {\n        $this->errors[] = $error;\n        if ($this->do_debug >= 1) {\n            echo '<pre>';\n            foreach ($this->errors as $error) {\n                print_r($error);\n            }\n            echo '</pre>';\n        }\n    }\n\n    /**\n     * Get an array of error messages, if any.\n     * @return array\n     */\n    public function getErrors()\n    {\n        return $this->errors;\n    }\n\n    /**\n     * POP3 connection error handler.\n     * @param integer $errno\n     * @param string $errstr\n     * @param string $errfile\n     * @param integer $errline\n     * @access protected\n     */\n    protected function catchWarning($errno, $errstr, $errfile, $errline)\n    {\n        $this->setError(array(\n            'error' => \"Connecting to the POP3 server raised a PHP warning: \",\n            'errno' => $errno,\n            'errstr' => $errstr,\n            'errfile' => $errfile,\n            'errline' => $errline\n        ));\n    }\n}\n"],"file":"class.pop3.php"}